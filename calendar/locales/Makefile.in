# vim:set ts=8 sw=8 sts=8 noet:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

DEPTH           = @DEPTH@
topsrcdir       = @top_srcdir@
srcdir          = @srcdir@
VPATH           = @srcdir@
relativesrcdir  = @relativesrcdir@

include $(DEPTH)/config/autoconf.mk

export MOZ_CHROME_FILE_FORMAT=jar

ifeq ($(AB_CD),)
DIRS = ../timezones
endif

include $(topsrcdir)/config/config.mk

run_for_effects := $(shell if test ! -d $(DIST); then $(NSINSTALL) -D $(DIST); fi; if test ! -d $(DIST)/branding; then $(NSINSTALL) -D $(DIST)/branding; fi)
_ABS_DIST := $(call core_abspath,$(DIST))

SUBMAKEFILES += $(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/Makefile

# This makefile uses variable overrides from the libs-% target to
# build non-default locales to non-default dist/ locations. Be aware!

AB = $(firstword $(subst -, ,$(AB_CD)))

ifdef MOZ_SUNBIRD
APP_VERSION = $(SUNBIRD_VERSION)
DEFINES += -DAPP_VERSION="$(APP_VERSION)"
endif

# These are defaulted to be compatible with the files the wget-en-US target
# pulls. You may override them if you provide your own files. You _must_
# override them when MOZ_PKG_PRETTYNAMES is defined - the defaults will not
# work in that case.
ZIP_IN ?= $(_ABS_DIST)/$(PACKAGE)
WIN32_INSTALLER_IN ?= $(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe
ifdef MOZ_SUNBIRD
RETRIEVE_WINDOWS_INSTALLER = 1
endif

DEFINES += \
    -DAB_CD=$(AB_CD) \
    -DMOZ_LANGPACK_EID=langpack-$(AB_CD)@sunbird.mozilla.org \
    -DMOZ_APP_VERSION=$(MOZ_APP_VERSION) \
    -DMOZ_APP_MAXVERSION=$(MOZ_APP_MAXVERSION) \
    -DLOCALE_SRCDIR=$(LOCALE_SRCDIR) \
    -DPKG_BASENAME="$(PKG_BASENAME)" \
    -DPKG_INST_BASENAME="$(PKG_INST_BASENAME)" \
    $(NULL)

include $(topsrcdir)/config/rules.mk

clobber-%:
	$(RM) -rf $(DIST)/xpi-stage/locale-$*

libs-%:
	$(NSINSTALL) -D $(DIST)/install
	@$(MAKE) -C ../../mozilla/toolkit/locales libs-$* BOTH_MANIFESTS=1
ifdef MOZ_SUNBIRD
	@$(MAKE) -C ../sunbird/locales libs AB_CD=$* XPI_NAME=locale-$* PREF_DIR=defaults/pref BOTH_MANIFESTS=1
endif
	@$(MAKE) libs AB_CD=$* XPI_NAME=locale-$* PREF_DIR=defaults/pref BOTH_MANIFESTS=1
	@$(MAKE) -C $(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/locales AB_CD=$* XPI_NAME=locale-$* BOTH_MANIFESTS=1

ifneq (,$(filter cocoa,$(MOZ_WIDGET_TOOLKIT)))
MOZ_PKG_MAC_DSSTORE=$(_ABS_DIST)/branding/dsstore
MOZ_PKG_MAC_BACKGROUND=$(_ABS_DIST)/branding/background.png
MOZ_PKG_MAC_ICON=$(_ABS_DIST)/branding/disk.icns
endif

PACKAGER_NO_LIBS = 1
include $(MOZILLA_SRCDIR)/toolkit/mozapps/installer/packager.mk

repackage-win32-installer: WIN32_INSTALLER_OUT="$(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe"
repackage-win32-installer: $(WIN32_INSTALLER_IN) $(SUBMAKEFILES)
	@echo "Repackaging $(WIN32_INSTALLER_IN) into $(WIN32_INSTALLER_OUT)."
	$(MAKE) -C $(DEPTH)/$(MOZ_BRANDING_DIRECTORY) export
	if test ! -d $(_ABS_DIST)/$(PKG_INST_PATH); then \
	  $(NSINSTALL) -D $(_ABS_DIST)/$(PKG_INST_PATH); \
	fi
	$(RM) -rf l10n-stage
	$(NSINSTALL) -D l10n-stage
	$(CYGWIN_WRAPPER) 7z x -ol10n-stage $(WIN32_INSTALLER_IN)
	$(RM) -r l10n-stage/localized
	$(RM) l10n-stage/setup.exe
	$(RM) -r l10n-stage/nonlocalized/extensions/calendar-timezones@mozilla.org/chrome
# copy xpi-stage over, but not install.rdf and chrome.manifest,
# those are just for language packs
	cp -r $(DIST)/xpi-stage/locale-$(AB_CD) l10n-stage/localized
	$(RM) l10n-stage/localized/install.rdf l10n-stage/localized/chrome.manifest
	$(RM) -rf $(DIST)/xpi-stage/calendar-timezones
	$(MAKE) -C ../timezones libs-$(AB_CD) USE_EXTENSION_MANIFEST=1
	mv $(DIST)/xpi-stage/calendar-timezones/chrome l10n-stage/nonlocalized/extensions/calendar-timezones@mozilla.org
	mv $(DIST)/xpi-stage/calendar-timezones/chrome.manifest l10n-stage/nonlocalized/extensions/calendar-timezones@mozilla.org
	$(MAKE) -C ../installer/windows CONFIG_DIR=l10ngen l10ngen/setup.exe l10ngen/7zSD.sfx
	cp ../installer/windows/l10ngen/setup.exe l10n-stage
	$(NSINSTALL) -D l10n-stage/localized/uninstall
	cp ../installer/windows/l10ngen/helper.exe l10n-stage/localized/uninstall
	rm -f app.7z
	cd l10n-stage && \
	  $(CYGWIN_WRAPPER) 7z a -r -t7z ../app.7z -mx -m0=BCJ2 -m1=LZMA:d24 -m2=LZMA:d19 -m3=LZMA:d19 -mb0:1 -mb0s1:2 -mb0s2:3
	cat ../installer/windows/l10ngen/7zSD.sfx \
	    $(topsrcdir)/calendar/installer/windows/app.tag \
	    app.7z > $(WIN32_INSTALLER_OUT)
	chmod 0755 $(WIN32_INSTALLER_OUT)

ifeq (WINNT,$(OS_ARCH))
repackage-win32-installer-%: $(WIN32_INSTALLER_IN) libs-%
	@$(MAKE) repackage-win32-installer AB_CD=$* WIN32_INSTALLER_IN=$(WIN32_INSTALLER_IN)
else
repackage-win32-installer-%: ;
endif

ifneq (,$(filter cocoa,$(MOZ_WIDGET_TOOLKIT)))
STAGEDIST = $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/MacOS
else
STAGEDIST = $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_DIR)
endif

$(STAGEDIST): AB_CD:=en-US
$(STAGEDIST): UNPACKAGE=$(ZIP_IN)
$(STAGEDIST): $(ZIP_IN)
# only mac needs to remove the parent of STAGEDIST...
ifneq (,$(filter cocoa,$(MOZ_WIDGET_TOOLKIT)))
	if test -d $(DIST)/l10n-stage; then \
	  $(RM) -r -v $(DIST)/l10n-stage; \
	fi
else
# ... and windows doesn't like removing STAGEDIST itself, remove all children
	if test -d $(DIST)/l10n-stage; then \
	  find $(STAGEDIST) -maxdepth 1 -print0 | xargs -0 $(RM) -r ; \
	fi
endif
	$(NSINSTALL) -D $(DIST)/l10n-stage
	cd $(DIST)/l10n-stage && \
	  $(UNMAKE_PACKAGE)
	make clobber-zip AB_CD=en-US

clobber-zip:
	$(RM) $(STAGEDIST)/chrome/$(AB_CD).jar \
	  $(STAGEDIST)/chrome/$(AB_CD).manifest \
	  $(STAGEDIST)/chrome/calendar-$(AB_CD).jar \
	  $(STAGEDIST)/chrome/calendar-$(AB_CD).manifest \
	  $(STAGEDIST)/chrome/sunbird-$(AB_CD).jar \
	  $(STAGEDIST)/chrome/sunbird-$(AB_CD).manifest \
	  $(STAGEDIST)/defaults/pref/sunbird-l10n.js
	$(RM) -rf $(STAGEDIST)/extensions/calendar-timezones@mozilla.org/chrome
	$(RM) $(STAGEDIST)/extensions/calendar-timezones@mozilla.org/chrome.manifest
	$(RM) -r $(STAGEDIST)/defaults/profile \
	  $(STAGEDIST)/chrome/$(AB_CD) \
	  $(STAGEDIST)/chrome/calendar-$(AB_CD)
	$(RM) -rf $(DIST)/xpi-stage/calendar-timezones

unpack: $(STAGEDIST)
	@echo done unpacking

repackage-zip: ZIP_OUT="$(_ABS_DIST)/$(PACKAGE)"
repackage-zip: UNPACKAGE="$(ZIP_IN)"
repackage-zip:
	$(MAKE) -C ../timezones libs-$(AB_CD) USE_EXTENSION_MANIFEST=1
ifeq (WINNT,$(OS_ARCH))
	$(RM) -r $(STAGEDIST)/uninstall
	$(NSINSTALL) -D $(STAGEDIST)/uninstall
	cp ../installer/windows/l10ngen/helper.exe $(STAGEDIST)/uninstall
endif
# copy xpi-stage over, but not install.rdf and chrome.manifest,
# those are just for language packs
	cd $(DIST)/xpi-stage/locale-$(AB_CD) && \
	  tar --exclude=install.rdf --exclude=chrome.manifest $(TAR_CREATE_FLAGS) - * | ( cd $(STAGEDIST) && tar -xf - )
	cd $(DIST)/xpi-stage/calendar-timezones && \
	  tar $(TAR_CREATE_FLAGS) - * | ( cd $(STAGEDIST)/extensions/calendar-timezones@mozilla.org && tar -xf - )
ifneq (en,$(AB))
ifneq (,$(filter cocoa,$(MOZ_WIDGET_TOOLKIT)))
	mv $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/en.lproj $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/$(AB).lproj
endif
endif
	cd $(DIST)/l10n-stage; \
	  $(MAKE_PACKAGE)
ifdef MOZ_MAKE_COMPLETE_MAR
	$(MAKE) -C $(MOZDEPTH)/tools/update-packaging full-update AB_CD=$(AB_CD) \
	  MOZ_PKG_PRETTYNAMES=$(MOZ_PKG_PRETTYNAMES) \
	  PACKAGE_BASE_DIR="$(_ABS_DIST)/l10n-stage" \
	  DIST="$(_ABS_DIST)"
endif
# packaging done, undo l10n stuff
ifneq (en,$(AB))
ifneq (,$(filter cocoa,$(MOZ_WIDGET_TOOLKIT)))
	mv $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/$(AB).lproj $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/en.lproj
endif
endif
	$(MAKE) clobber-zip AB_CD=$(AB_CD)
	mv -f "$(DIST)/l10n-stage/$(PACKAGE)" "$(DIST)/$(PACKAGE)"

repackage-zip-%: $(ZIP_IN) $(STAGEDIST) libs-%
	@$(MAKE) repackage-zip AB_CD=$* ZIP_IN=$(ZIP_IN)

langpack-%: LANGPACK_FILE=$(_ABS_DIST)/install/sunbird-$(MOZ_APP_VERSION).$(AB_CD).langpack.xpi
langpack-%: AB_CD=$*
langpack-%: XPI_NAME=locale-$*
langpack-%: libs-%
	@echo "Making langpack $(LANGPACK_FILE)"
	$(NSINSTALL) -D $(DIST)/install
	@$(MAKE) -C ../timezones/locales libs AB_CD=$* XPI_NAME=calendar-timezones USE_EXTENSION_MANIFEST=1
	$(PYTHON) $(MOZILLA_SRCDIR)/config/Preprocessor.py $(DEFINES) $(ACDEFINES) -I$(call EXPAND_MOZLOCALE_SRCDIR,toolkit/locales)/defines.inc -I$(LOCALE_SRCDIR)/defines.inc $(srcdir)/generic/install.rdf > $(FINAL_TARGET)/install.rdf
	cd $(DIST)/xpi-stage/calendar-timezones/chrome && \
	  tar $(TAR_CREATE_FLAGS) - * | ( cd $(_ABS_DIST)/xpi-stage/locale-$(AB_CD)/chrome && tar -xf - )
	cat $(DIST)/xpi-stage/calendar-timezones/chrome.manifest >> $(_ABS_DIST)/xpi-stage/locale-$(AB_CD)/chrome.manifest
	cd $(DIST)/xpi-stage/locale-$(AB_CD) && \
	  if test -d dictionaries; then \
	    $(ZIP) -r9D $(LANGPACK_FILE) install.rdf chrome chrome.manifest defaults dictionaries -x chrome/$(AB_CD).manifest -x chrome/sunbird-$(AB_CD).manifest -x chrome/calendar-$(AB_CD).manifest; \
	  else \
	    $(ZIP) -r9D $(LANGPACK_FILE) install.rdf chrome chrome.manifest defaults -x chrome/$(AB_CD).manifest -x chrome/sunbird-$(AB_CD).manifest -x chrome/calendar-$(AB_CD).manifest; \
	  fi

# This is a generic target that will make a langpack, repack ZIP (+tarball)
# builds, and repack an installer if applicable. It is called from the
# tinderbox scripts. Alter it with caution.

installers-%: clobber-% langpack-% repackage-win32-installer-% repackage-zip-%
	@echo "repackaging done"

# This variable is to allow the wget-en-US target to know which ftp server to download from
ifndef EN_US_BINARY_URL 
EN_US_BINARY_URL = $(error You must set EN_US_BINARY_URL)
endif

# This make target allows us to wget the latest en-US binary from a specified website
# The make installers-% target needs the en-US binary in dist/
# and for the windows repackages we need the .installer.exe in dist/sea
wget-en-US:
ifndef WGET
	$(error Wget not installed)
endif
	(cd $(_ABS_DIST) && $(WGET) -nv -N  $(EN_US_BINARY_URL)/$(PACKAGE))
	@echo "Downloaded $(EN_US_BINARY_URL)/$(PACKAGE) to $(_ABS_DIST)/$(PACKAGE)"
ifeq ($(OS_ARCH), WINNT)
	$(NSINSTALL) -D $(_ABS_DIST)/$(PKG_INST_PATH)
	(cd $(_ABS_DIST)/$(PKG_INST_PATH) && $(WGET) -nv -N "$(EN_US_BINARY_URL)/$(PKG_PATH)$(PKG_INST_BASENAME).exe")
	@echo "Downloaded $(EN_US_BINARY_URL)/$(PKG_PATH)$(PKG_INST_BASENAME).exe to $(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe"
endif

ident:
	@printf "comm_revision "
	@$(PYTHON) $(MOZILLA_SRCDIR)/config/printconfigsetting.py \
	    $(STAGEDIST)/application.ini App SourceStamp
	@printf "moz_revision "
	@$(PYTHON) $(MOZILLA_SRCDIR)/config/printconfigsetting.py \
	    $(STAGEDIST)/platform.ini Build SourceStamp
	@printf "buildid "
	@$(PYTHON) $(MOZILLA_SRCDIR)/config/printconfigsetting.py \
	    $(STAGEDIST)/application.ini App BuildID

#These make targets call prepare-repackages by setting different UPLOAD_DIR
prepare-upload-latest-%:
	@$(MAKE) prepare-repackages-$* UPLOAD_DIR=$(DIST)/upload/latest

prepare-upload-dated-%:
	@$(MAKE) prepare-repackages-$* UPLOAD_DIR=$(DIST)/upload/`date "+%Y-%m-%d-%H"`-$(MOZ_PKG_APPNAME)$(MOZ_APP_VERSION)-l10n

# This target will generate a UPLOAD_DIR folder with
# l10n repackages in the way that we offer l10n nightlies
#  1) the package/binary
#  2) the langpack xpi
#  3) the installer (on windows)
# To set the paths those packages should end up, override the following vars:
# PKG_PATH, PKG_LANGPACK_PATH, PKG_INST_PATH
prepare-repackages-%: AB_CD=$*
prepare-repackages-%:
ifndef UPLOAD_DIR
	$(error UPLOAD_DIR not defined)
endif
	$(NSINSTALL) -D $(UPLOAD_DIR)
	$(NSINSTALL) -D $(UPLOAD_DIR)/$(PKG_LANGPACK_PATH)
# Move the langpack
	mv $(DIST)/$(PKG_LANGPACK_PATH)$(PKG_LANGPACK_BASENAME).xpi \
	   $(UPLOAD_DIR)/$(PKG_LANGPACK_PATH)$(PKG_LANGPACK_BASENAME).xpi
# Move the repackage
	mv "$(DIST)/$(PACKAGE)" \
	   "$(UPLOAD_DIR)/$(PACKAGE)"
# Move the windows installer
ifeq (WINNT, $(OS_ARCH))
	mv "$(DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe" \
	   "$(UPLOAD_DIR)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe"
endif
# Set the permissions that the folders will have in ftp once uploaded
	chmod -vR 775 $(UPLOAD_DIR)

l10n-upload-%: AB_CD=$*
l10n-upload-%:
	$(PYTHON) $(MOZILLA_SRCDIR)/build/upload.py --base-path $(DIST) "$(DIST)/$(PACKAGE)" $(DIST)/$(LANGPACK)
ifdef MOZ_MAKE_COMPLETE_MAR
	$(PYTHON) $(MOZILLA_SRCDIR)/build/upload.py --base-path $(DIST) $(DIST)/$(COMPLETE_MAR) $(call QUOTED_WILDCARD,$(wildcard $(DIST)/$(PARTIAL_MAR)))
endif
ifeq (WINNT,$(OS_ARCH))
	$(PYTHON) $(MOZILLA_SRCDIR)/build/upload.py --base-path $(DIST) "$(INSTALLER_PACKAGE)"
endif


merge-%:
ifdef LOCALE_MERGEDIR
	$(RM) -rf $(LOCALE_MERGEDIR)
	MACOSX_DEPLOYMENT_TARGET= compare-locales -m $(LOCALE_MERGEDIR) $(srcdir)/l10n.ini $(L10NBASEDIR) $*
endif
	@echo
