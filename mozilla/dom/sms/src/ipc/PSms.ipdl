/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set sw=2 ts=8 et ft=cpp : */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PContent;
include "mozilla/dom/sms/Types.h";

using DeliveryState;
using ReadState;

namespace mozilla {
namespace dom {
namespace sms {

struct SmsMessageData {
  int32_t       id;
  DeliveryState delivery;
  nsString      sender;
  nsString      receiver;
  nsString      body;
  uint64_t      timestamp; // ms since epoch.
  bool          read;
};

struct SmsFilterData {
  uint64_t      startDate;
  uint64_t      endDate;
  nsString[]    numbers;
  DeliveryState delivery;
  ReadState     read;  
};

sync protocol PSms {
    manager PContent;

child:
    NotifyReceivedMessage(SmsMessageData aMessageData);

    NotifySentMessage(SmsMessageData aMessageData);

    NotifyDeliveredMessage(SmsMessageData aMessageData);

    NotifyRequestSmsSent(SmsMessageData aMessageData, int32_t aRequestId,
                         uint64_t aProcessId);

    NotifyRequestSmsSendFailed(int32_t aError, int32_t aRequestId,
                               uint64_t aProcessId);

    NotifyRequestGotSms(SmsMessageData aMessageData, int32_t aRequestId,
                        uint64_t aProcessId);

    NotifyRequestGetSmsFailed(int32_t aError, int32_t aRequestId,
                              uint64_t aProcessId);

    NotifyRequestSmsDeleted(bool aDeleted, int32_t aRequestId,
                            uint64_t aProcessId);

    NotifyRequestSmsDeleteFailed(int32_t aError, int32_t aRequestId,
                                 uint64_t aProcessId);

    NotifyRequestNoMessageInList(int32_t aRequestId, uint64_t aProcessId);

    NotifyRequestCreateMessageList(int32_t aListId, SmsMessageData aMessageData, int32_t aRequestId, uint64_t aProcessId);

    NotifyRequestGotNextMessage(SmsMessageData aMessageData, int32_t aRequestId, uint64_t aProcessId);

    NotifyRequestReadListFailed(int32_t aError, int32_t aRequestId,
                                uint64_t aProcessId);
    NotifyRequestMarkedMessageRead(bool aRead, int32_t aRequestId,
                                   uint64_t aProcessId);
    NotifyRequestMarkMessageReadFailed(int32_t aError, int32_t aRequestId,
                                       uint64_t aProcessId);

parent:
    sync HasSupport()
        returns (bool aHasSupport);

    sync GetNumberOfMessagesForText(nsString aText)
        returns (uint16_t aNumber);

    SendMessage(nsString aNumber, nsString aMessage, int32_t aRequestId,
                uint64_t aProcessId);

    sync SaveReceivedMessage(nsString aSender, nsString aBody, uint64_t aDate)
        returns (int32_t aId);

    sync SaveSentMessage(nsString aReceiver, nsString aBody, uint64_t aDate)
        returns (int32_t aId);

    GetMessage(int32_t aMessageId, int32_t aRequestId, uint64_t aProcessId);

    DeleteMessage(int32_t aMessageId, int32_t aRequestId, uint64_t aProcessId);

    CreateMessageList(SmsFilterData aFilter, bool aReverse, int32_t aRequestId, uint64_t aProcessId);

    GetNextMessageInList(int32_t aListId, int32_t aRequestId, uint64_t aProcessId);

    ClearMessageList(int32_t aListId);

    MarkMessageRead(int32_t aMessageId, bool aValue, int32_t aRequestId, uint64_t aProcessId);

    __delete__();
};

} // namespace sms
} // namespace dom
} // namespace mozilla
