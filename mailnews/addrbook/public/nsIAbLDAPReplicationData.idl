/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIAbLDAPDirectory;
interface nsILDAPConnection;
interface nsILDAPURL;
interface nsIAbLDAPReplicationQuery;
interface nsIWebProgressListener;

/**
 * this service does replication of an LDAP directory to a local Mork AB Database.
 */
[scriptable, uuid(e628bbc9-8793-4f0b-bce4-990d399b1fca)]
interface nsIAbLDAPProcessReplicationData : nsISupports
{
   /**
     * readonly attribute giving the current replication state
     */
    readonly attribute int32_t replicationState;

   /**
     * replication states
     */
    const long kIdle                  = 0;
    const long kAnonymousBinding      = 1;
    const long kAuthenticatedBinding  = 2;
    const long kSyncServerBinding     = 3;
    const long kSearchingAuthDN       = 4;
    const long kDecidingProtocol      = 5;
    const long kAuthenticating        = 6;
    const long kReplicatingAll        = 7;
    const long kSearchingRootDSE      = 8;
    const long kFindingChanges        = 9;
    const long kReplicatingChanges    = 10;
    const long kReplicationDone       = 11;

   /**
     * readonly attribute giving the current protocol used
     */
    readonly attribute int32_t protocolUsed ;

   /**
     * replication protocols
     */
    const long kDefaultDownloadAll         = 0;
    const long kChangeLogProtocol          = 1;
    const long kLCUPProtocol               = 2;
    const long kLastUpdatedTimeStampMethod = 3;

   /**
     * this method initializes the implementation
     */
    void init(in nsIAbLDAPDirectory directory,
              in nsILDAPConnection connection,
              in nsILDAPURL url,
              in nsIAbLDAPReplicationQuery query,
              in nsIWebProgressListener progressListener);

   /**
     * this method a aborts the ongoing processing
     */
    void abort();
};

